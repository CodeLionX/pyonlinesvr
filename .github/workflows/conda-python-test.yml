name: Python build and test using Conda

on:
  push:
    branches:
    - main
    tags:
    - *
  pull_request:
    branches:
    - main

jobs:
  test:
    name: Build and test PyOnlineSVR on ${{ matrix.os }} with python ${{ matrix.python_version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]  # [ubuntu-latest, windows-latest, macOS-latest]
        python_version: ["3.6.10", "3.7", "3.8", "3.9"]
      fail-fast: false

    defaults:
      run:
        shell: bash -l {0}

    steps:
    - uses: actions/checkout@v2
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v2.1.1
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python_version }}
    - name: Install Linux build dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        conda install -y swig gcc_linux-64 gxx_linux-64
    - name: Install MacOS build dependencies
      if: matrix.os == 'macOS-latest'
      run: |
        conda install -y swig clang_osx-64 clangxx_osx-64
    - name: Install Windows build dependencies
      if: matrix.os == 'windows-latest'
      run: |
        conda install -y swig
    - name: Install test dependencies
      run: |
        pip install $(python dependencies.py --tag test --no-pin)
    - name: Versions
      run: |
        which python
        python --version
        conda --version
        pip --version
        echo "flake8"; flake8 --version
        mypy --version
        pytest --version
        swig -version
    - name: Build extension and generate source files
      run: |
        python setup.py build_ext --inplace
    - name: Lint with flake8
      run: |
        flake8 . --count --show-source --statistics
    - name: Typecheck with mypy
      run: |
        mypy
    - name: Test with pytest
      run: |
        pytest


  build-source-distribution:
    name: Building source distribution
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs: test
    runs-on: ubuntu-latest
      fail-fast: false

    defaults:
      run:
        shell: bash -l {0}

    steps:
    - uses: actions/checkout@v2
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v2.1.1
      with:
        auto-update-conda: true
        python-version: 3.9
    - name: Build source distribution
      run: |
        python setup.py sdist
    - name: Upload packages
      uses: actions/upload-artifact@v2
      with:
        name: packages-source
        path: dist


  build-binary-wheel:
    name: Build binary wheel on ${{ matrix.os }} with python ${{ matrix.python_version }}
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]  # [ubuntu-latest, windows-latest, macOS-latest]
        python_version: ["3.6.10", "3.7", "3.8", "3.9"]
      fail-fast: false

    defaults:
      run:
        shell: bash -l {0}

    steps:
    - uses: actions/checkout@v2
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v2.1.1
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python_version }}
    - name: Install Linux build dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        conda install -y swig gcc_linux-64 gxx_linux-64
    - name: Install MacOS build dependencies
      if: matrix.os == 'macOS-latest'
      run: |
        conda install -y swig clang_osx-64 clangxx_osx-64
    - name: Install Windows build dependencies
      if: matrix.os == 'windows-latest'
      run: |
        conda install -y swig
    - name: Build wheel
      run: |
        python setup.py bdist_wheel
    - name: Upload packages
      uses: actions/upload-artifact@v2
      with:
        name: packages-${{ matrix.os }}-${{ matrix.python_version }}
        path: dist


  publish:
    name: Publish distributions
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs: [build-binary-wheel, build-source-distribution]
    runs-on: ubuntu-latest

    steps:
    - name: Download packages
      uses: actions/download-artifact@v2
      with:
        path: dist
    - name: Publish package to PyPi
      uses: pypa/gh-action-pypi-publish@release/v1.4.2
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
