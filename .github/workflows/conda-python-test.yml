name: Test PR

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  test:
    name: Build and test PyOnlineSVR on ${{ matrix.os }} with python ${{ matrix.python_version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python_version: ["3.7", "3.8", "3.9", "3.10"]
      fail-fast: false

    defaults:
      run:
        shell: bash -l {0}

    steps:
    - uses: actions/checkout@v2
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v2.1.1
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python_version }}
    - name: Install Linux build dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        conda install -y swig gcc_linux-64 gxx_linux-64
    - name: Install MacOS build dependencies
      if: matrix.os == 'macOS-latest'
      run: |
        conda install -y swig clang_osx-64 clangxx_osx-64
    - name: Install Windows build dependencies
      if: matrix.os == 'windows-latest'
      run: |
        conda install -y swig
    - name: Install test dependencies
      run: |
        pip install $(python dependencies.py --tag test --no-pin)
    - name: Versions
      run: |
        which python
        python --version
        conda --version
        pip --version
        echo "flake8"; flake8 --version
        mypy --version
        pytest --version
        swig -version
    - name: Build extension and generate source files
      run: |
        python setup.py build_ext --inplace
    - name: Lint with flake8
      run: |
        flake8 . --count --show-source --statistics
    - name: Typecheck with mypy
      run: |
        mypy
    - name: Test with pytest
      run: |
        pytest tests --cov=pyonlinesvr --cov-report xml
    - name: Extract test coverage
      run: |
        SUMMARY=$(sed -n "s/^<coverage.*line-rate=\"\([0-9.]*\)\".*>$/\1/p" coverage.xml)
        echo "COVERAGE=$(echo ${SUMMARY})" >> $GITHUB_ENV
        echo "Extracted coverage data: ${COVERAGE}"

        REF=${{ github.ref }}
        IFS='/' read -ra PATHS <<< "$REF"
        BRANCH_NAME="${PATHS[1]}_${PATHS[2]}"
        echo "BRANCH=$(echo ${BRANCH_NAME})" >> $GITHUB_ENV
        echo "Extracted branch name: $BRANCH_NAME"
    - name: Create coverage badge
      if: ${{ matrix.python_version == '3.10' && matrix.os == 'ubuntu-latest' }}
      uses: schneegans/dynamic-badges-action@v1.0.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 6762bee806477c52e079f21d2f252688
        filename: pyonlinesvr__${{ env.BRANCH }}.json
        label: Test Coverage
        message: ${{ env.COVERAGE }}
        color: green
        namedLogo: pytest
